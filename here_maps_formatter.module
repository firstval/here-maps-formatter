<?php

/**
 * @file
 * Provides fomatter integration of the HERE Maps JS API with the Geofield.
 */

/**
 * Implements hook_menu().
 */
function here_maps_formatter_menu() {
  $items = array();

  $items['admin/config/here_maps'] = array(
    'title' => t('HERE Maps Keys'),
    'description' => t('Configuration page for HERE Maps keys.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('here_maps_formatter_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * FAPI for map's API keys settings page.
 */
function here_maps_formatter_admin_settings($form, &$form_state) {
  $form = array();

  $form['here_maps'] = array(
    '#title' => t('HERE Maps Keys'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['here_maps']['here_maps_formatter_app_id'] = array(
    '#title' => t('HERE Maps App ID'),
    '#type' => 'textfield',
    '#default_value' => variable_get('here_maps_formatter_app_id', 'DemoAppId01082013GAL'),
  );

  $form['here_maps']['here_maps_formatter_app_code'] = array(
    '#title' => t('HERE Maps App Code'),
    '#type' => 'textfield',
    '#default_value' => variable_get('here_maps_formatter_app_code', 'AJKnXv84fjrb0KIHawS0Tg'),
  );

  // Create a system-generated submit form. This is equivalent to:
  // $form['#submit'][] = 'system_settings_form_submit';
  // The advantage of this 'submit' callback is the automatic calling
  // of the corresponding variable_set() for the form elements of the same name:
  // 'here_maps_app_id' and 'here_maps_app_code'.
  $form = system_settings_form($form);

  return $form;
}


/**
 * Implements hook_field_formatter_info().
 */
function here_maps_formatter_field_formatter_info() {
  $formatters = array();

  if (module_exists('geofield')) {
    // Set the machine name, label, and field type to be associated with.
    // It means also that Geofield is a dependency.
    $formatters['geofield_here_maps'] = array(
      'label' => t('HERE Maps'),
      'field types' => array('geofield'),
      'settings'  => array(
        // Give default values when the form is first loaded.
        'width' => 600,
        'width_unit' => 'px',
        'height' => 400,
        'zoom' => 12,
        'base_map' => 'Normal',
        'connection_protocol' => 'http',
        'map_settings' => 1,
        'scale_bar' => 1,
      ),
    );
  }

  return $formatters;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function here_maps_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // Get the view_mode where our settings are stored.
  $display = $instance['display'][$view_mode];

  // Get the actual settings.
  $settings = $display['settings'];

  // Initialize the element variable.
  $element = array();

  if ($display['type'] == 'geofield_here_maps') {
    $element['width'] = array(
      '#title' => t('Map Width'),
      '#type' => 'textfield',
      '#size' => 5,
      '#required' => TRUE,
      '#default_value' => $settings['width'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#prefix' => '<div><div style="float: left">',
      '#suffix' => '</div>',
    );

    $element['width_unit'] = array(
      '#type' => 'select',
      '#default_value' => $settings['width_unit'],
      '#options' => array(
        'px' => t('px'),
        'em' => t('em'),
        '%' => t('%'),
      ),
      '#prefix' => '<div>',
      '#suffix' => '</div></div>',
      '#attributes' => array(
        'style' => 'margin-left: -4px; margin-top: 22px;',
      ),
    );

    // Reset the floats before rendering the Map Height element.
    $element['height'] = array(
      '#title' => t('Map Height'),
      '#type' => 'textfield',
      '#size' => 5,
      '#required' => TRUE,
      '#default_value' => $settings['height'],
      '#field_suffix' => t('px'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#prefix' => '<div style="clear: left;">',
      '#suffix' => '</div>',
    );

    $element['zoom'] = array(
      '#title' => t('Zoom Level'),
      '#type' => 'select',
      '#description' => t('For multiple markers, the best zoom level will be auto-computed to fit them all in the map.'),
      '#default_value' => $settings['zoom'],
      '#options' => variable_get('here_maps_formatter_zoom_levels'),
    );

    $element['base_map'] = array(
      '#type' => 'select',
      '#title' => t('Base Map'),
      '#default_value' => $settings['base_map'],
      '#options' => array(
        'Normal' => t('Normal'),
        'Satellite' => t('Satellite'),
        'Terrain' => t('Terrain'),
      ),
    );

    $element['connection_protocol'] = array(
      '#type' => 'select',
      '#title' => t('Connection Protocol'),
      '#default_value' => $settings['connection_protocol'],
      '#options' => array(
        'http' => t('http'),
        'https' => t('https'),
      ),
    );

    $element['map_settings'] = array(
      '#title' => t('Include Map Settings Button'),
      '#type' => 'checkbox',
      '#default_value' => $settings['map_settings'],
    );

    $element['scale_bar'] = array(
      '#title' => t('Include Scale Bar'),
      '#type' => 'checkbox',
      '#default_value' => $settings['scale_bar'],
    );
  }

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function here_maps_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'geofield_here_maps') {
    $summary[] = t('HERE Maps Settings');

    $summary[] = t('Map Width: @width@unit', array(
      '@width' => $settings['width'],
      '@unit' => $settings['width_unit'],
      )
    );

    $summary[] = t('Map Height: @heightpx', array(
      '@height' => $settings['height'],
      )
    );

    $summary[] = t('Zoom Level: @zoom', array(
      '@zoom' => $settings['zoom'],
      )
    );

    $summary[] = t('Base Map: @base_map', array(
      '@base_map' => $settings['base_map'],
      )
    );

    $summary[] = t('Connection Protocol: @connection_protocol', array(
      '@connection_protocol' => $settings['connection_protocol'],
      )
    );

    // Convert the 0 or 1 checkbox's value/state to a more readable format.
    $map_settings = ($settings['map_settings'] == 1) ? 'Enabled' : 'Disabled';

    $summary[] = t('Map Settings Button: @map_settings', array(
      '@map_settings' => $map_settings,
      )
    );
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function here_maps_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $map_width = $settings['width'];
  $map_width_unit = $settings['width_unit'];
  $map_height = $settings['height'];
  $map_zoom = $settings['zoom'];
  $base_map = $settings['base_map'];
  $connection_protocol = $settings['connection_protocol'];
  $map_settings = $settings['map_settings'];

  $element = array();

  if ($display['type'] == 'geofield_here_maps') {
    // Make sure that there are Geofield values to process.
    // This will make also the HERE Maps scripts to be loaded only
    // in selected pages to avoid affecting a page's stability and
    // its loading performance.
    if (!empty($items)) {
      // Load the helper scripts.
      _here_maps_formatter_scripts_loader();

      // Replace the Geofield markup.
      $element[0] = array('#markup' => '<div id="here-maps" data-zoom="' . $map_zoom . '" style="width: ' . $map_width . $map_width_unit . '; height: ' . $map_height . 'px;"></div>');

      // Setup the data to be passed to JS processor.
      $data = array();
      $data['features'] = $items;
      $data['base_map'] = $base_map;
      $data['connection_protocol'] = $connection_protocol;
      $data['map_ui'] = array(
        'map_settings' => $map_settings,
      );

      // Pass the Geofield map features info to the map processor in JavaScript.
      drupal_add_js(array('here_maps_formatter' => $data), 'setting');
    }
  }

  // This is the 'edited' field, or fields for multiple-valued fields.
  return $element;
}


/**
 * Helper function for loading HERE Maps core and related scripts.
 */
function _here_maps_formatter_scripts_loader() {
  // Retrieve the app credential values,
  // return their default values if they're not set yet.
  $app_code = variable_get('here_maps_formatter_app_code', 'AJKnXv84fjrb0KIHawS0Tg');
  $app_id = variable_get('here_maps_formatter_app_id', 'DemoAppId01082013GAL');

  // Check if the app credentials have not been deleted on their admin form
  // or they're not set to empty values.
  $app_code = (!empty($app_code)) ? $app_code : 'AJKnXv84fjrb0KIHawS0Tg';
  $app_id = (!empty($app_id)) ? $app_id : 'DemoAppId01082013GAL';

  // Retrieve HERE Maps keys/credentials.
  $api_keys = array(
    'app_code' => $app_code,
    'app_id' => $app_id,
  );

  // Append the keys to the Drupal.settings.here_maps_formatter global object.
  drupal_add_js(array('here_maps_formatter' => $api_keys), 'setting');

  // Add HERE Maps 3.0 libraries.
  drupal_add_css('//js.api.here.com/v3/3.0.8.0/mapsjs-ui.css', 'external');
  drupal_add_js('//js.api.here.com/v3/3.0.8.0/mapsjs-core.js', 'external');
  drupal_add_js('//js.api.here.com/v3/3.0.8.0/mapsjs-service.js', 'external');
  drupal_add_js('//js.api.here.com/v3/3.0.8.0/mapsjs-mapevents.js', 'external');
  drupal_add_js('//js.api.here.com/v3/3.0.8.0/mapsjs-ui.js', 'external');

  // Load the custom HERE Maps behaviors for processing the map objects.
  drupal_add_js(drupal_get_path('module', 'here_maps_formatter') . '/js/here_maps_formatter.js');
}
