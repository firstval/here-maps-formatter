<?php

/**
 * Implements hook_init().
 */
function here_maps_formatter_init() {
  // Retrieve HERE Maps Keys.
  $api_keys = array(
    'app_code' => variable_get('here_maps_formatter_app_code', 'AJKnXv84fjrb0KIHawS0Tg'),
    'app_id' => variable_get('here_maps_formatter_app_id', 'DemoAppId01082013GAL'),
  );

  // Append the keys to the Drupal.settings.here_maps_formatter global object.
  // @todo: Need to find a way to not expose these keys to users.
  drupal_add_js(array('here_maps_formatter' => $api_keys), 'setting');

  // @todo: For optimal page rendering, load all the scripts here only
  // when the page has a non-empty Geofield which is set to HERE Maps formatter.
  //
  // Add HERE Maps 3.0 libraries.
  drupal_add_css('http://js.api.here.com/v3/3.0.8.0/mapsjs-ui.css', 'external');
  drupal_add_js('http://js.api.here.com/v3/3.0.8.0/mapsjs-core.js', 'external');
  drupal_add_js('http://js.api.here.com/v3/3.0.8.0/mapsjs-service.js', 'external');
  drupal_add_js('http://js.api.here.com/v3/3.0.8.0/mapsjs-mapevents.js', 'external');
  drupal_add_js('http://js.api.here.com/v3/3.0.8.0/mapsjs-ui.js', 'external');
  drupal_add_js('http://js.api.here.com/v3/3.0/mapsjs-pano.js');

  // Load the custom HERE Maps behaviors for processing the map objects.
  drupal_add_js(drupal_get_path('module', 'here_maps_formatter') . '/js/here_maps_formatter.js');
}


/**
 * Implements hook_menu().
 */
function here_maps_formatter_menu() {
  $items = array();

  $items['admin/config/here_maps'] = array(
    'title' => "HERE Maps Keys",
    'description' => 'Configuration page for HERE Maps keys.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('here_maps_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * FAPI for map's API keys settings page.
 */
function here_maps_admin_settings($form, &$form_state) {
  $form = array();

  $form['here_maps'] = array(
    '#title' => "HERE Maps Keys",
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['here_maps']['here_maps_formatter_app_id'] = array(
    '#title' => t('HERE Maps App ID'),
    '#type' => 'textfield',
    '#default_value' => variable_get('here_maps_app_id', 'DemoAppId01082013GAL'),
  );

  $form['here_maps']['here_maps_formatter_app_code'] = array(
    '#title' => t('HERE Maps App Code'),
    '#type' => 'textfield',
    '#default_value' => variable_get('here_maps_app_code', 'AJKnXv84fjrb0KIHawS0Tg'),
  );

  // Create a system-generated submit form. This is equivalent to:
  // $form['#submit'][] = 'system_settings_form_submit';
  // The advantage of this 'submit' callback is the automatic calling
  // of the corresponding variable_set() for the form elements of the same name:
  // 'here_maps_app_id' and 'here_maps_app_code'.
  $form = system_settings_form($form);

  return $form;
}


/**
 * Implements hook_field_formatter_info().
 */
function here_maps_formatter_field_formatter_info() {
  $formatters = array();

  if (module_exists('geofield')) {
    // Set the machine name, label, and field type to be associated with.
    // It means also that Geofield is a dependency.
    $formatters['geofield_here_maps'] = array(
      'label' => t('HERE Maps'),
      'field types' => array('geofield'),
      'settings'  => array(
        // Give a default value when the form is first loaded.
        'height' => 400,
        'zoom' => 12,
      ),
    );
  }

  return $formatters;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function here_maps_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // Get the view_mode where our settings are stored.
  $display = $instance['display'][$view_mode];

  // Get the actual settings.
  $settings = $display['settings'];

  // Initialize the element variable.
  $element = array();

  if ($display['type'] == 'geofield_here_maps') {
    $element['height'] = array(
      '#title' => t('Map Height'),
      '#type' => 'textfield',
      '#size' => 4,
      '#default_value' => $settings['height'],
      '#field_suffix' => t('px'),
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $element['zoom'] = array(
      '#title' => t('Zoom Level'),
      '#type' => 'select',
      '#default_value' => $settings['zoom'],
      '#options' => variable_get('here_maps_formatter_zoom_levels'),
    );
  }

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function here_maps_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'geofield_here_maps') {
    $summary[] = t('HERE Maps Settings');

    $summary[] = t('Map Height: @height', array(
      '@height' => $settings['height'],
      )
    );

    $summary[] = t('Zoom Level: @zoom', array(
      '@zoom' => $settings['zoom']
      )
    );
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 *
 * See also: https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_view/7
 */
function here_maps_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $map_height = $settings['height'];
  $map_zoom = $settings['zoom'];

  $element = array();

  if ($display['type'] == 'geofield_here_maps') {
    // Make sure that there are Geofield values to process.
    if (!empty($items)) {
      // Since a field could have multiple values.
      foreach ($items as $delta => $item) {
        // $delta is 0, 1, etc.
        // $element[0] is the target field for single-valued fields.
        // Inject the custom markup here.
        // $item['value'] is the actual/raw value.
        // Wrap a div on this field.
        $element[$delta] = array('#markup' => '<div id="here-maps" data-zoom="' . $map_zoom . '" style="width: 100%; height: ' . $map_height . 'px;"></div>');
      }

      $features = array(
        // . $item['lat'] . ', '. $item['lon'].
        // @todo Handle case with multiple points.
        'features' => $items[0]
      );

      // Pass the Geofield map features info to the map processor in JavaScript.
      drupal_add_js(array('here_maps_formatter' => $features), 'setting');
    }
  }

  // This is the 'edited' field, or fields for multiple-valued fields.
  return $element;
}
